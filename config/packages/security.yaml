security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_ADMIN: [ROLE_GESEC, ROLE_ADHERENT]
        ROLE_GESEC: [ROLE_ADHERENT]
        ROLE_ADHERENT: []

    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: App\Security\LoginAuthenticator
            form_login:
                login_path: /login
                check_path: /login
            logout:
                path: /logout
                target: /
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 604800
                path: /
                #always_remember_me: true
            custom_authenticator: App\Security\LoginAuthenticator

    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/clients, roles: ROLE_GESEC }
        - { path: ^/sites, roles: ROLE_GESEC }
        - { path: ^/affaires, roles: [ROLE_GESEC, ROLE_ADHERENT] }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
